


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           Generic ARM 
                       Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.86
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;
   14 00000000         ; For       : ARMv7M Cortex-M3
   15 00000000         ; Mode      : Thumb2
   16 00000000         ; Toolchain : RealView Development Suite
   17 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   18 00000000         ;             ARM Developer Suite (ADS)
   19 00000000         ;             Keil uVision
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         ;                                           PUBLIC FUNCT
                       IONS
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         
   26 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   27 00000000                 EXTERN           OSPrioCur
   28 00000000                 EXTERN           OSPrioHighRdy
   29 00000000                 EXTERN           OSTCBCur
   30 00000000                 EXTERN           OSTCBHighRdy
   31 00000000                 EXTERN           OSIntNesting
   32 00000000                 EXTERN           OSIntExit
   33 00000000                 EXTERN           OSTaskSwHook
   34 00000000         
   35 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   36 00000000                 EXPORT           OS_CPU_SR_Restore
   37 00000000                 EXPORT           OSStartHighRdy
   38 00000000                 EXPORT           OSCtxSw
   39 00000000                 EXPORT           OSIntCtxSw
   40 00000000                 EXPORT           PendSV_Handler
   41 00000000         
   42 00000000         ;*******************************************************
                       *************************************************
   43 00000000         ;                                                EQUATES
                       
   44 00000000         ;*******************************************************



ARM Macro Assembler    Page 2 


                       *************************************************
   45 00000000         
   46 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   47 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   48 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   49 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   50 00000000         
   51 00000000         ;*******************************************************
                       *************************************************
   52 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   53 00000000         ;*******************************************************
                       *************************************************
   54 00000000         
   55 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   56 00000000                 THUMB
   57 00000000                 REQUIRE8
   58 00000000                 PRESERVE8
   59 00000000         
   60 00000000         ;*******************************************************
                       *************************************************
   61 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   62 00000000         ;
   63 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   64 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   65 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   66 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   67 00000000         ;              into the CPU's status register.
   68 00000000         ;
   69 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   70 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   71 00000000         ;
   72 00000000         ;
   73 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   74 00000000         ;
   75 00000000         ;                 void Task (void *p_arg)
   76 00000000         ;                 {
   77 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /



ARM Macro Assembler    Page 3 


                       * Allocate storage for CPU status register */
   78 00000000         ;                     OS_CPU_SR  cpu_sr;
   79 00000000         ;                 #endif
   80 00000000         ;
   81 00000000         ;                          :
   82 00000000         ;                          :
   83 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   84 00000000         ;                          :
   85 00000000         ;                          :
   86 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   87 00000000         ;                          :
   88 00000000         ;                          :
   89 00000000         ;                 }
   90 00000000         ;*******************************************************
                       *************************************************
   91 00000000         
   92 00000000         OS_CPU_SR_Save
   93 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   94 00000004 B672            CPSID            I
   95 00000006 4770            BX               LR
   96 00000008         
   97 00000008         OS_CPU_SR_Restore
   98 00000008 F380 8810       MSR              PRIMASK, R0
   99 0000000C 4770            BX               LR
  100 0000000E         
  101 0000000E         ;*******************************************************
                       *************************************************
  102 0000000E         ;                                          START MULTITA
                       SKING
  103 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  104 0000000E         ;
  105 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  106 0000000E         ;              the first task to start.
  107 0000000E         ;
  108 0000000E         ;           2) OSStartHighRdy() MUST:
  109 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  110 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  111 0000000E         ;              c) Set OSRunning to TRUE;
  112 0000000E         ;              d) Trigger PendSV exception;
  113 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  114 0000000E         ;*******************************************************
                       *************************************************
  115 0000000E         
  116 0000000E         OSStartHighRdy
  117 0000000E 4820            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  118 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  119 00000014 7001            STRB             R1, [R0]
  120 00000016         



ARM Macro Assembler    Page 4 


  121 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  122 00000018 F380 8809       MSR              PSP, R0
  123 0000001C         
  124 0000001C         ;Floating point context control register(FPCCR).
  125 0000001C F8DF 0074       ldr.w            r0, =0xe000ef34
  126 00000020 6801            ldr              r1, [r0]
  127 00000022         ;Lazy save always.
  128 00000022 F041 4140       orr              r1, r1, #( 0x3 << 30 )
  129 00000026 6001            str              r1, [r0]
  130 00000028         
  131 00000028 481B            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  132 0000002A 2101            MOVS             R1, #1
  133 0000002C 7001            STRB             R1, [R0]
  134 0000002E         
  135 0000002E 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  136 00000030 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  137 00000034 6001            STR              R1, [R0]
  138 00000036         
  139 00000036 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  140 00000038         
  141 00000038         OSStartHang
  142 00000038 E7FE            B                OSStartHang ; Should never get 
                                                            here
  143 0000003A         
  144 0000003A         
  145 0000003A         ;*******************************************************
                       *************************************************
  146 0000003A         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  147 0000003A         ;                                           void OSCtxSw
                       (void)
  148 0000003A         ;
  149 0000003A         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  150 0000003A         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  151 0000003A         ;*******************************************************
                       *************************************************
  152 0000003A         
  153 0000003A         OSCtxSw
  154 0000003A 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  155 0000003C F04F 5180       LDR              R1, =NVIC_PENDSVSET
  156 00000040 6001            STR              R1, [R0]
  157 00000042 4770            BX               LR
  158 00000044         
  159 00000044         ;*******************************************************
                       *************************************************
  160 00000044         ;                             PERFORM A CONTEXT SWITCH (



ARM Macro Assembler    Page 5 


                       From interrupt level)
  161 00000044         ;                                         void OSIntCtxS
                       w(void)
  162 00000044         ;
  163 00000044         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  164 00000044         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  165 00000044         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  166 00000044         ;*******************************************************
                       *************************************************
  167 00000044         
  168 00000044         OSIntCtxSw
  169 00000044 4815            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  170 00000046 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  171 0000004A 6001            STR              R1, [R0]
  172 0000004C 4770            BX               LR
  173 0000004E         
  174 0000004E         ;*******************************************************
                       *************************************************
  175 0000004E         ;                                         HANDLE PendSV 
                       EXCEPTION
  176 0000004E         ;                                     void OS_CPU_PendSV
                       Handler(void)
  177 0000004E         ;
  178 0000004E         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  179 0000004E         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  180 0000004E         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  181 0000004E         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  182 0000004E         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  183 0000004E         ;              a thread or occurs due to an interrupt or
                        exception.
  184 0000004E         ;
  185 0000004E         ;           2) Pseudo-code is:
  186 0000004E         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  187 0000004E         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  188 0000004E         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  189 0000004E         ;              d) Call OSTaskSwHook();
  190 0000004E         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  191 0000004E         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  192 0000004E         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  193 0000004E         ;              h) Restore R4-R11 from new process stack;
                       
  194 0000004E         ;              i) Perform exception return which will re



ARM Macro Assembler    Page 6 


                       store remaining context.
  195 0000004E         ;
  196 0000004E         ;           3) On entry into PendSV handler:
  197 0000004E         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  198 0000004E         ;                 xPSR, PC, LR, R12, R0-R3
  199 0000004E         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  200 0000004E         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  201 0000004E         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  202 0000004E         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  203 0000004E         ;
  204 0000004E         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  205 0000004E         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  206 0000004E         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  207 0000004E         ;*******************************************************
                       *************************************************
  208 0000004E         
  209 0000004E         PendSV_Handler
  210 0000004E B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  211 00000050 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  212 00000054 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  213 00000056         
  214 00000056         ;Is the task using the FPU context? If so, push high vfp
                        registers.
  215 00000056         ; tst r14, #0x10
  216 00000056         ; it eq
  217 00000056         ; vstmdbeq r0!, {s16-s31}
  218 00000056         
  219 00000056 3820            SUBS             R0, R0, #0x20
  220 00000058 E880 0FF0       STM              R0, {R4-R11} ; Save remaining r
                                                            egs r4-11 on proces
                                                            s stack    
  221 0000005C         
  222 0000005C 4910            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  223 0000005E 6809            LDR              R1, [R1]
  224 00000060 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  225 00000062         ; At this point, entire context of process has been save
                       d
  226 00000062         OS_CPU_PendSVHandler_nosave
  227 00000062 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  228 00000064 480F            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();



ARM Macro Assembler    Page 7 


  229 00000066 4780            BLX              R0
  230 00000068 F85D EB04       POP              {R14}
  231 0000006C         
  232 0000006C 480E            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  233 0000006E 490F            LDR              R1, =OSPrioHighRdy
  234 00000070 780A            LDRB             R2, [R1]
  235 00000072 7002            STRB             R2, [R0]
  236 00000074         
  237 00000074 480A            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  238 00000076 490E            LDR              R1, =OSTCBHighRdy
  239 00000078 680A            LDR              R2, [R1]
  240 0000007A 6002            STR              R2, [R0]
  241 0000007C         
  242 0000007C 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  243 0000007E E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  244 00000082 3020            ADDS             R0, R0, #0x20
  245 00000084         
  246 00000084         ;Is the task using the FPU context? If so, pop the high 
                       vfp registers too.
  247 00000084         ; tst r14, #0x10
  248 00000084         ; it eq
  249 00000084         ; vldmiaeq r0!, {s16-s31}
  250 00000084         
  251 00000084 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  252 00000088 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  253 0000008C B662            CPSIE            I
  254 0000008E 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  255 00000090         
  256 00000090                 END
              E000ED22 
              E000EF34 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\os_cpu_a.d -o.\obj\os_cpu_a.o -I.\RTE\_STM32F4xx_IN_FLASH
 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4
xx\Include -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__MICROLIB SETA 1" --pre
define="__UVISION_VERSION SETA 523" --predefine="STM32F407xx SETA 1" --list=.\o
s_cpu_a.lst ..\ucos\port\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 55 in file ..\ucos\port\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 0000003A

Symbol: OSCtxSw
   Definitions
      At line 153 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 38 in file ..\ucos\port\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000044

Symbol: OSIntCtxSw
   Definitions
      At line 168 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 39 in file ..\ucos\port\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000038

Symbol: OSStartHang
   Definitions
      At line 141 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 142 in file ..\ucos\port\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 116 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 37 in file ..\ucos\port\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler_nosave 00000062

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 226 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 212 in file ..\ucos\port\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 97 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 36 in file ..\ucos\port\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 92 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 35 in file ..\ucos\port\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000004E

Symbol: PendSV_Handler
   Definitions
      At line 209 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 40 in file ..\ucos\port\os_cpu_a.asm
Comment: PendSV_Handler used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 46 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 135 in file ..\ucos\port\os_cpu_a.asm
      At line 154 in file ..\ucos\port\os_cpu_a.asm
      At line 169 in file ..\ucos\port\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 49 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 136 in file ..\ucos\port\os_cpu_a.asm
      At line 155 in file ..\ucos\port\os_cpu_a.asm
      At line 170 in file ..\ucos\port\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 48 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 118 in file ..\ucos\port\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 47 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 117 in file ..\ucos\port\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file ..\ucos\port\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 31 in file ..\ucos\port\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 27 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 232 in file ..\ucos\port\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 28 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 233 in file ..\ucos\port\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 26 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 131 in file ..\ucos\port\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 29 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 222 in file ..\ucos\port\os_cpu_a.asm
      At line 237 in file ..\ucos\port\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 30 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 238 in file ..\ucos\port\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file ..\ucos\port\os_cpu_a.asm
   Uses
      At line 228 in file ..\ucos\port\os_cpu_a.asm
Comment: OSTaskSwHook used once
8 symbols
357 symbols in table
